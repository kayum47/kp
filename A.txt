										ML
LinearRegression
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# 1. Generate sample data
# X: House size in square feet
X = np.array([[1000], [1200], [1500], [1800], [2000], [2200], [2500], [2700]])
# y: Price in $1000
y = np.array([200, 240, 300, 360, 400, 440, 500, 540])

# 2. Split into training and testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# 3. Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Predict using the test set
y_pred = model.predict(X_test)

# 5. Print model parameters
print("Slope (Weight):", model.coef_[0])
print("Intercept (Bias):", model.intercept_)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R^2 Score (Accuracy):", r2_score(y_test, y_pred))

# 6. Visualize results
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X, model.predict(X), color='red', linewidth=2, label='Regression Line')
plt.xlabel("Size (sq ft)")
plt.ylabel("Price ($1000)")
plt.title("Simple Linear Regression: House Price Prediction")
plt.legend()
plt.grid(True)
plt.show()
	------------------------------------------------------------------
Resize image 
  
 import cv2 
 import matplotlib.pyplot as plt 
  
 image = cv2.imread("f.jpg", 1) 
  
 half = cv2.resize(image, (0, 0), fx = 0.1, fy = 0.1) 
 bigger = cv2.resize(image, (1050, 1610)) 
stretch_near = cv2.resize(image, (780, 540), interpolation = 
 cv2.ITER_ĮIEAR) 
  
 Titles =["Original", "Half", "Bigger", "Interpolation earest"] 
 images =[image, half, bigger, stretch_near] 
 count = 4 
  
 for i in range(count): 
 plt.subplot(2, 2, i + 1) 
 plt.title(Titles[i]) 
 plt.imshow(images[i]) 
  
 plt.show() 
	-----------------------------------------------------------------
					Detect face and eyes  
2 import numpy as np  
3 import cv2  
4   
5 face_cascade = 
6 cv2.CascadeClassifier('haarcascade_frontalface_default.xml')  
7 eye_cascade    =    cv2.CascadeClassifier('haarcascade_eye.xml')  
8   
9 img  =  cv2.imread('img_3.png')  
10 gray = cv2.cvtColor(img, cv2.COĮOR_BGR2GRAY)  
11 faces = face_cascade.detectMultiScale(gray, 1.3, 5)  
12 for (x,y,w,h) in faces:  
13 img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)  
14 roi_gray = gray[y:y+h, x:x+w]  
15 roi_color = img[y:y+h, x:x+w]  
16 eyes = eye_cascade.detectMultiScale(roi_gray)  
17 for (ex,ey,ew,eh) in eyes:  
18 cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)  
19   
20 cv2.imshow('img',img)  
21 cv2.waitKey(0)  
 cv2.destroyAllWindows() 

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

										Kotlin
    Develop an andriod application to read and write text file into internal storage
package com.example.filehandling

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.IOException

class MainActivity : AppCompatActivity() {

    private val FILE_NAME = "myfile.txt"
    private lateinit var editText: EditText
    private lateinit var textView: TextView
    private lateinit var btnSave: Button
    private lateinit var btnRead: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        editText = findViewById(R.id.editText)
        textView = findViewById(R.id.textView)
        btnSave = findViewById(R.id.btnSave)
        btnRead = findViewById(R.id.btnRead)

        // Save Button Click Event
        btnSave.setOnClickListener {
            saveToFile()
        }

        // Read Button Click Event
        btnRead.setOnClickListener {
            readFromFile()
        }
    }

    // Function to write data to file
    private fun saveToFile() {
        val text = editText.text.toString()
        try {
            val fos: FileOutputStream = openFileOutput(FILE_NAME, MODE_PRIVATE)
            fos.write(text.toByteArray())
            fos.close()
            Toast.makeText(this, "File Saved", Toast.LENGTH_SHORT).show()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    // Function to read data from file
    private fun readFromFile() {
        try {
            val fis: FileInputStream = openFileInput(FILE_NAME)
            val data = fis.bufferedReader().use { it.readText() }
            fis.close()
            textView.text = data
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}


xml

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/editText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter text to save" />

    <Button
        android:id="@+id/btnSave"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Save to File" />

    <Button
        android:id="@+id/btnRead"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Read from File" />

    <TextView
        android:id="@+id/textView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="File Content will be displayed here"
        android:padding="10dp"
        android:textSize="16sp" />

</LinearLayout>

	-------------------------------------------------------------------------
Develop an andriod application to read and write text file into External storage
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/editTextInput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter text" />

    <Button
        android:id="@+id/btnWrite"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Write to External Storage"
        android:layout_marginTop="10dp" />

    <Button
        android:id="@+id/btnRead"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Read from External Storage"
        android:layout_marginTop="10dp" />

    <TextView
        android:id="@+id/textViewOutput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:paddingTop="20dp"
        android:text="Output will appear here..." />
</LinearLayout>

package com.example.externalstorage

import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.externalstorage.databinding.ActivityMainBinding
import java.io.File
import java.io.IOException

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val fileName = "external_text.txt"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.btnWrite.setOnClickListener {
            val textToWrite = binding.editTextInput.text.toString()
            writeToExternalStorage(textToWrite)
        }

        binding.btnRead.setOnClickListener {
            val content = readFromExternalStorage()
            binding.textViewOutput.text = content
        }
    }

    private fun writeToExternalStorage(data: String) {
        val file = File(getExternalFilesDir(null), fileName)
        try {
            file.writeText(data)
            Toast.makeText(this, "Data written to ${file.absolutePath}", Toast.LENGTH_SHORT).show()
        } catch (e: IOException) {
            e.printStackTrace()
            Toast.makeText(this, "Error writing to file", Toast.LENGTH_SHORT).show()
        }
    }

    private fun readFromExternalStorage(): String {
        val file = File(getExternalFilesDir(null), fileName)
        return try {
            if (file.exists()) {
                file.readText()
            } else {
                "File does not exist"
            }
        } catch (e: IOException) {
            e.printStackTrace()
            "Error reading file"
        }
    }
}
